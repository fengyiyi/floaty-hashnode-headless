'use client'
import { Container } from "@/components/Container"
import { usePostQuery } from "../../../../generated/graphq"
import { useQuery } from "@tanstack/react-query"
import { ContactMe } from "@/components/ContactMe"
import { loadIframeResizer } from "@/utils/services/embed"
import { useEffect, useState } from "react"
import { useEmbeds } from "../../../../hooks/useEmbeds"
import { triggerCustomWidgetEmbed } from "@/utils/trigger-custom-widget-embed"
import { MarkdownToHtml } from "@/components/MarkdownToHtml"
import { resizeImage } from "@/utils/image"
import handleMathJax from "@/utils/handle-math-jax"
import Head from "next/head"
import { getAutogeneratedPostOG } from "@/utils/social/og"
import { CoverImage } from "@/components/CoverImage"
import { PostHeader } from "@/components/PostHeader"
// import { highlightJsMonokaiTheme } from "@/utils/consts/constants"

const host = process.env.NEXT_PUBLIC_HASHNODE_PUBLICATION_HOST as string

export default function BlogContent({ params }: {
    params: { slug: string }
}) {
    const highlightJsMonokaiTheme =
        '.hljs{display:block;overflow-x:auto;padding:.5em;background:#23241f}.hljs,.hljs-subst,.hljs-tag{color:#f8f8f2}.hljs-emphasis,.hljs-strong{color:#a8a8a2}.hljs-bullet,.hljs-link,.hljs-literal,.hljs-number,.hljs-quote,.hljs-regexp{color:#ae81ff}.hljs-code,.hljs-section,.hljs-selector-class,.hljs-title{color:#a6e22e}.hljs-strong{font-weight:700}.hljs-emphasis{font-style:italic}.hljs-attr,.hljs-keyword,.hljs-name,.hljs-selector-tag{color:#f92672}.hljs-attribute,.hljs-symbol{color:#66d9ef}.hljs-class .hljs-title,.hljs-params{color:#f8f8f2}.hljs-addition,.hljs-built_in,.hljs-builtin-name,.hljs-selector-attr,.hljs-selector-id,.hljs-selector-pseudo,.hljs-string,.hljs-template-variable,.hljs-type,.hljs-variable{color:#e6db74}.hljs-comment,.hljs-deletion,.hljs-meta{color:#75715e}';

    const { data, isLoading } = useQuery({

        queryKey: usePostQuery.getKey({
            host,
            slug: params.slug
        }),
        queryFn: usePostQuery.fetcher({
            host,
            slug: params.slug
        })
    })

    const [, setMobMount] = useState(false);
    const [canLoadEmbeds, setCanLoadEmbeds] = useState(false);
    useEmbeds({ enabled: canLoadEmbeds });


    useEffect(() => {
        if (screen.width <= 425) {
            setMobMount(true);
        }

        if (!data) {
            return;
        }

        (async () => {
            await loadIframeResizer();
            triggerCustomWidgetEmbed(post.id.toString());
            setCanLoadEmbeds(true);
        })();
    }, []);

    if (!data?.publication?.post) return null;

    const { publication: { post } } = data

    if (post.hasLatexInPost) {
        setTimeout(() => {
            handleMathJax(true);
        }, 500);
    }

    const coverImageSrc = post.coverImage?.url ? resizeImage(post.coverImage.url, {
        w: 1600,
        h: 840,
        c: 'thumb',
    }) : undefined;

    return (
        <>
            <Head>
                <title>{post.seo?.title || post.title}</title>
                <link rel="canonical" href={post.url} />
                <meta name="description" content={post.seo?.description || post.subtitle || post.brief} />
                <meta property="twitter:card" content="summary_large_image" />
                <meta property="twitter:title" content={post.seo?.title || post.title} />
                <meta
                    property="twitter:description"
                    content={post.seo?.description || post.subtitle || post.brief}
                />
                <meta
                    property="og:image"
                    content={
                        post.ogMetaData?.image ||
                        post.coverImage?.url ||
                        getAutogeneratedPostOG(post, data.publication)
                    }
                />
                <meta
                    property="twitter:image"
                    content={
                        post.ogMetaData?.image ||
                        post.coverImage?.url ||
                        getAutogeneratedPostOG(post, data.publication)
                    }
                />
                <style dangerouslySetInnerHTML={{ __html: highlightJsMonokaiTheme }} />
            </Head>
            <Container>
                <article className="rounded-3xl w-full bg-white p-4 md:p-8 shadow-md">
                    {
                        post.coverImage?.url && <CoverImage title={post.title} priority={true} src={coverImageSrc} />
                    }
                    <PostHeader title={post.title} name={post.author.name} profileImage={post.author.profilePicture} subtitle={post.subtitle}/>
                    <hr className="mb-4" />
                    {
                        post.content.markdown && <MarkdownToHtml contentMarkdown={post.content.markdown} />
                    }
                </article>
                <ContactMe />
            </Container>
        </>
    )
}